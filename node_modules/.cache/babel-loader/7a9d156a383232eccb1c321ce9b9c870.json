{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: 'AIzaSyCdHT-AYHXjF7wOrfAchX4PIm3cSj5tn14',\n  authDomain: 'crwn-db.firebaseapp.com',\n  databaseURL: 'https://crwn-db.firebaseio.com',\n  projectId: 'crwn-db',\n  storageBucket: 'crwn-db.appspot.com',\n  messagingSenderId: '850995411664',\n  appId: '1:850995411664:web:7ddc01d597846f65'\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const collectionRef = await collectionRef.get();\n\n  if (snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  promp: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/home/abdullah/Desktop/react-shoppie-app/src/Firebase/FirebaseUtils.jsx"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","get","snapShot","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","promp","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAI;AACVC,EAAAA,MAAM,EAAE,yCADE;AAEZC,EAAAA,UAAU,EAAE,yBAFA;AAGZC,EAAAA,WAAW,EAAE,gCAHD;AAIZC,EAAAA,SAAS,EAAE,SAJC;AAKZC,EAAAA,aAAa,EAAE,qBALH;AAMZC,EAAAA,iBAAiB,EAAE,cANP;AAOZC,EAAAA,KAAK,EAAE;AAPK,CAAhB;AAWE,OAAO,MAAMC,yBAAyB,GAAG,OAAMC,QAAN,EAAgBC,cAAhB,KAAmC;AACxE,MAAG,CAACD,QAAJ,EAAc;AAEd,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,aAAa,GAAG,MAAMA,aAAa,CAACC,GAAd,EAA5B;;AAEA,MAAGC,QAAQ,CAACC,MAAZ,EAAmB;AACf,UAAK;AAACC,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAuBX,QAA5B;AACA,UAAMY,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAG;AACC,YAAMX,OAAO,CAACY,GAAR,CAAY;AACdJ,QAAAA,WADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,SAHc;AAId,WAAGX;AAJW,OAAZ,CAAN;AAMH,KAPD,CAOC,OAAMc,KAAN,EAAY;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACD;AACJ;;AAED,SAAOhB,OAAP;AACH,CAvBM;AA0BTZ,QAAQ,CAAC6B,aAAT,CAAuB5B,MAAvB;AAEA,OAAO,MAAM6B,IAAI,GAAG9B,QAAQ,CAAC8B,IAAT,EAAb;AACP,OAAO,MAAMjB,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB;AAEP,MAAMkB,QAAQ,GAAG,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,KAAK,EAAE;AAAR,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe/B,QAAf","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nconst config =  {\n      apiKey: 'AIzaSyCdHT-AYHXjF7wOrfAchX4PIm3cSj5tn14',\n    authDomain: 'crwn-db.firebaseapp.com',\n    databaseURL: 'https://crwn-db.firebaseio.com',\n    projectId: 'crwn-db',\n    storageBucket: 'crwn-db.appspot.com',\n    messagingSenderId: '850995411664',\n    appId: '1:850995411664:web:7ddc01d597846f65',\n  };\n\n\n  export const createUserProfileDocument = async(userAuth, additionalData) => {\n      if(!userAuth) return\n\n      const userRef = firestore.doc(`users/${userAuth.uid}`)\n      const collectionRef = await collectionRef.get();\n\n      if(snapShot.exists){\n          const{displayName, email} = userAuth\n          const createdAt = new Date();\n\n          try{\n              await userRef.set({\n                  displayName,\n                  email,\n                  createdAt,\n                  ...additionalData\n              })\n          }catch(error){\n            console.log('error creating user', error.message);\n          }\n      }\n\n      return userRef\n  };\n\n\nfirebase.initializeApp(config)\n\nexport const auth = firebase.auth()\nexport const firestore = firebase.firestore()\n\nconst provider = new firebase.auth.GoogleAuthProvider()\nprovider.setCustomParameters({promp: 'select_account'})\nexport const signInWithGoogle = () => auth.signInWithPopup(provider)\n\nexport default firebase\n"]},"metadata":{},"sourceType":"module"}